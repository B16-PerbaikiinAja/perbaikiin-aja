name: Spring Boot CI/CD Pipeline with Docker

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Debug branch information
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo "GitHub branch: ${{ github.ref_name }}"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Build and package with Gradle
        run: ./gradlew bootJar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  build-and-push-docker:
    needs: build
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/perbaikiinaja-backend:${{ env.BRANCH_NAME }},${{ secrets.DOCKERHUB_USERNAME }}/perbaikiinaja-backend:latest

  deploy-staging:
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    steps:
      - name: Debug branch information
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo "Is staging branch: ${{ github.ref == 'refs/heads/staging' }}"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup known hosts
        run: |
          mkdir -p ~/.ssh
          echo "Resolving hostname..."
          getent hosts ${{ secrets.EC2_HOST }} || echo "Could not resolve hostname with getent"
          echo "Attempting to scan with ssh-keyscan..."
          ssh-keyscan -v -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || echo "Warning: ssh-keyscan failed"
          cat ~/.ssh/known_hosts

      - name: Deploy to EC2 with Docker (Amazon Linux)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_USER: ${{ secrets.PG_USER }}
          PG_PASS: ${{ secrets.PG_PASS }}
          PORT: ${{ secrets.PORT || '8080' }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          ssh $EC2_USERNAME@$EC2_HOST << EOF
            
            mkdir -p ~/perbaikiinaja
            mkdir -p ~/perbaikiinaja/prometheus
            mkdir -p ~/perbaikiinaja/grafana/provisioning/datasources

            # Create docker-compose.yml with environment variable substitution
            cat > ~/perbaikiinaja/docker-compose.yml << 'COMPOSE_EOF'
          version: '3'
          services:
            prometheus:
              image: prom/prometheus:v2.44.0
              container_name: prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus:/etc/prometheus
              networks:
                - monitoring-network
              restart: unless-stopped
              
            grafana:
              image: grafana/grafana:9.5.2
              container_name: grafana
              ports:
                - "3000:3000"
              volumes:
                - ./grafana/provisioning:/etc/grafana/provisioning
              environment:
                - GF_SECURITY_ADMIN_USER=admin
                - GF_SECURITY_ADMIN_PASSWORD=admin
                - GF_USERS_ALLOW_SIGN_UP=false
              networks:
                - monitoring-network
              restart: unless-stopped
              depends_on:
                - prometheus

            perbaikiinaja-backend:
              image: ${DOCKERHUB_USERNAME}/perbaikiinaja-backend:staging
              container_name: perbaikiinaja-backend
              restart: always
              ports:
                - "${PORT}:8080"
              environment:
                - PG_HOST=${PG_HOST}
                - PG_USER=${PG_USER}
                - PG_PASS=${PG_PASS}
                - JWT_SECRET_KEY=${JWT_SECRET_KEY}
                - PORT=8080
              networks:
                - monitoring-network
              
          networks:
            monitoring-network:
              driver: bridge
          COMPOSE_EOF

          cat > ~/perbaikiinaja/prometheus/prometheus.yml << 'PROM_EOF'
            global:
              scrape_interval: 15s
              evaluation_interval: 15s
                        
            scrape_configs:
              - job_name: 'prometheus'
                static_configs:
                  - targets: ['localhost:9090']
                    
              - job_name: 'spring-boot-app'
                metrics_path: '/actuator/prometheus'
                scrape_interval: 5s
                static_configs:
                  - targets: ['perbaikiinaja-backend:8080']
                    labels:
                      application: 'Perbaikiinaja Spring Boot Application'
          PROM_EOF

          cat > ~/perbaikiinaja/grafana/provisioning/datasources/datasources.yml << 'GRAFANA_EOF'
            apiVersion: 1
            datasources:
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://prometheus:9090
                isDefault: true
          GRAFANA_EOF

            # Export environment variables for envsubst
            export PG_HOST="${PG_HOST}"
            export PG_USER="${PG_USER}"
            export PG_PASS="${PG_PASS}"
            export JWT_SECRET_KEY="${JWT_SECRET_KEY}"
            export PORT="${PORT}"
            export DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}"

            # Substitute environment variables in docker-compose.yml
            cd ~/perbaikiinaja
            envsubst < docker-compose.yml > docker-compose-temp.yml
            mv docker-compose-temp.yml docker-compose.yml

            # Ensure Docker is running
            sudo service docker start

            # Pull the latest image
            docker pull \${DOCKERHUB_USERNAME}/perbaikiinaja-backend:staging

            # Stop and remove existing container
            docker-compose down

            # Start the container
            docker-compose up -d

            # Check if container is running
            sleep 10
            if docker ps --filter "name=perbaikiinaja-backend" --format "{{.Names}}" | grep -q perbaikiinaja-backend; then
              echo "Container is running successfully"
              echo "Application should be accessible at http://${EC2_HOST}:${PORT}"
            else
              echo "Error: Container failed to start"
              docker logs perbaikiinaja-backend
              exit 1
            fi
          # Check monitoring services
            if docker ps --filter "name=prometheus" --format "{{.Names}}" | grep -q prometheus; then
              echo "Prometheus is running successfully"
              echo "Prometheus UI is accessible at http://${EC2_HOST}:9090"
            else
              echo "Error: Prometheus container failed to start"
              docker logs prometheus
              exit 1
            fi

            if docker ps --filter "name=grafana" --format "{{.Names}}" | grep -q grafana; then
              echo "Grafana is running successfully"
              echo "Grafana dashboard is accessible at http://${EC2_HOST}:3000"
              echo "Default credentials: admin/admin"
            else
              echo "Error: Grafana container failed to start"
              docker logs grafana
              exit 1
            fi

            echo "Monitoring setup completed successfully!"
            echo "Prometheus URL: http://${EC2_HOST}:9090"
            echo "Grafana URL: http://${EC2_HOST}:3000 (login with admin/admin)"
          EOF

  deploy-production:
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Debug branch information
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo "Is main branch: ${{ github.ref == 'refs/heads/main' }}"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Setup known hosts
        run: |
          mkdir -p ~/.ssh
          echo "Resolving hostname..."
          getent hosts ${{ secrets.PROD_EC2_HOST }} || echo "Could not resolve hostname with getent"
          echo "Attempting to scan with ssh-keyscan..."
          ssh-keyscan -v -H ${{ secrets.PROD_EC2_HOST }} >> ~/.ssh/known_hosts || echo "Warning: ssh-keyscan failed"
          cat ~/.ssh/known_hosts

      - name: Deploy to Production EC2 with Docker
        env:
          PROD_EC2_HOST: ${{ secrets.PROD_EC2_HOST }}
          PROD_EC2_USERNAME: ${{ secrets.PROD_EC2_USERNAME }}
          PROD_PG_HOST: ${{ secrets.PROD_PG_HOST }}
          PROD_PG_USER: ${{ secrets.PROD_PG_USER }}
          PROD_PG_PASS: ${{ secrets.PROD_PG_PASS }}
          PROD_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          PROD_PORT: ${{ secrets.PROD_PORT || '8080' }}
        run: |
          ssh $PROD_EC2_USERNAME@$PROD_EC2_HOST << EOF
            mkdir -p ~/perbaikiinaja-prod
            mkdir -p ~/perbaikiinaja-prod/prometheus
            mkdir -p ~/perbaikiinaja-prod/grafana/provisioning/datasources

            # Create docker-compose.yml with environment variable substitution
            cat > ~/perbaikiinaja-prod/docker-compose.yml << 'COMPOSE_EOF'
          version: '3'
          services:
            prometheus:
              image: prom/prometheus:v2.44.0
              container_name: prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus:/etc/prometheus
              networks:
                - monitoring-network
              restart: unless-stopped
              
            grafana:
              image: grafana/grafana:9.5.2
              container_name: grafana
              ports:
                - "3000:3000"
              volumes:
                - ./grafana/provisioning:/etc/grafana/provisioning
              environment:
                - GF_SECURITY_ADMIN_USER=admin
                - GF_SECURITY_ADMIN_PASSWORD=admin
                - GF_USERS_ALLOW_SIGN_UP=false
              networks:
                - monitoring-network
              restart: unless-stopped
              depends_on:
                - prometheus
            perbaikiinaja-backend:
              image: ${DOCKERHUB_USERNAME}/perbaikiinaja-backend:main
              container_name: perbaikiinaja-backend-prod
              restart: always
              ports:
                - "${PROD_PORT}:8080"
              environment:
                - PG_HOST=${PROD_PG_HOST}
                - PG_USER=${PROD_PG_USER}
                - PG_PASS=${PROD_PG_PASS}
                - JWT_SECRET_KEY=${PROD_JWT_SECRET_KEY}
                - PORT=8080
              networks:
                - monitoring-network
          monitoring-network:
            driver: bridge
          COMPOSE_EOF

          cat > ~/perbaikiinaja-prod/prometheus/prometheus.yml << 'PROM_EOF'
            global:
              scrape_interval: 15s
              evaluation_interval: 15s
                        
            scrape_configs:
              - job_name: 'prometheus'
                static_configs:
                  - targets: ['localhost:9090']
                    
              - job_name: 'spring-boot-app'
                metrics_path: '/actuator/prometheus'
                scrape_interval: 5s
                static_configs:
                  - targets: ['perbaikiinaja-backend-prod:8080']
                    labels:
                      application: 'Perbaikiinaja Spring Boot Application'
          PROM_EOF

          cat > ~/perbaikiinaja-prod/grafana/provisioning/datasources/datasources.yml << 'GRAFANA_EOF'
            apiVersion: 1
            datasources:
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://prometheus:9090
                isDefault: true
          GRAFANA_EOF

            # Export environment variables for envsubst
            export PG_HOST="${PROD_PG_HOST}"
            export PG_USER="${PROD_PG_USER}"
            export PG_PASS="${PROD_PG_PASS}"
            export JWT_SECRET_KEY="${PROD_JWT_SECRET_KEY}"
            export PROD_PORT="${PROD_PORT}"
            export DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}"

            # Substitute environment variables in docker-compose.yml
            cd ~/perbaikiinaja-prod
            envsubst < docker-compose.yml > docker-compose-temp.yml
            mv docker-compose-temp.yml docker-compose.yml

            # Ensure Docker is running
            sudo service docker start

            # Pull the latest image
            docker pull \${DOCKERHUB_USERNAME}/perbaikiinaja-backend:main

            # Stop and remove existing container
            docker-compose down

            # Start the container
            docker-compose up -d

            # Check if container is running
            sleep 10
            if docker ps --filter "name=perbaikiinaja-backend-prod" --format "{{.Names}}" | grep -q perbaikiinaja-backend-prod; then
              echo "Container is running successfully"
              echo "Production application should be accessible at http://${PROD_EC2_HOST}:${PROD_PORT}"
          
              # Additional health check
              echo "Performing health check..."
              sleep 5
              if curl -f http://localhost:${PROD_PORT}/actuator/health > /dev/null 2>&1; then
                echo "✓ Health check passed"
              else
                echo "⚠ Health check failed, but container is running. Check application logs:"
                docker logs perbaikiinaja-backend-prod --tail=20
              fi
            else
              echo "✗ Error: Container failed to start"
              echo "Container logs:"
              docker logs perbaikiinaja-backend-prod
              echo "Docker compose logs:"
              docker-compose logs
              exit 1
            fi

            # Check monitoring services
            if docker ps --filter "name=prometheus" --format "{{.Names}}" | grep -q prometheus; then
              echo "Prometheus is running successfully"
              echo "Prometheus UI is accessible at http://${PROD_EC2_HOST}:9090"
            else
              echo "Error: Prometheus container failed to start"
              docker logs prometheus
              exit 1
            fi

            if docker ps --filter "name=grafana" --format "{{.Names}}" | grep -q grafana; then
              echo "Grafana is running successfully"
              echo "Grafana dashboard is accessible at http://${PROD_EC2_HOST}:3000"
              echo "Default credentials: admin/admin"
            else
              echo "Error: Grafana container failed to start"
              docker logs grafana
              exit 1
            fi

            echo "Monitoring setup completed successfully!"
            echo "Prometheus URL: http://${PROD_EC2_HOST}:9090"
            echo "Grafana URL: http://${PROD_EC2_HOST}:3000 (login with admin/admin)"
          EOF
